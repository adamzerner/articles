Say that I need a user object. I can create one:

var user1 = {
	name: "Adam Zerner",
	email: "azerner3@gmail.com",
	password: "password"
};

Now say that I want to create a few more users. I could do that:

var user2 = {
	name: "John Smith",
	email: "johnsmith@gmail.com",
	password: "12345"
};

var user3 = {
	name: "Greg Popovich",
	email: "bigpoppa@gmail.com",
	password: "rings"
};

var user4 = {
	name: "Ike Taylor",
	email: "ike@tsquareduniversity.edu",
	password: "swag"
};

Phew, that was a little exhausting. These objects all have the same properties 
(name, email and password). Maybe I could write a function to do the work for me.
But how would I do that?

Well, let's see. I want the function to return an object that has those three 
properties. And I want to set the properties to the arguments of the function.

How about something like this:

function makeUser(name, email, password) {
	var toRet = {};
	toRet.name = name;
	toRet.email = email;
	toRet.password = password;
	return toRet;
}

Now I could do something like this:

var user1 = makeUser("Adam Zerner", "azerner3@gmail.com", "password");
var user2 = makeUser("John Smith", "johnsmith@gmail.com", "12345");
var user3 = makeUser("Greg Popovich", "bigpoppa@gmail.com", "rings");
var user4 = makeUser("Ike Taylor", "ike@tsquareduniversity.edu", "swag");

Pretty cool! That's a lot simpler and more concise than lines 3-27.

This is called the factory pattern because our makeUser function is sort of
like a factory for making users.

==============================================================================
See https://github.com/adamzerner/articles/blob/master/The%20%22new%22%20keyword 
for info on how we could use classes and the new keyworkd to implement the factory
pattern a bit differently.