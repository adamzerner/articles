Recursion can be really difficult to wrap your head around. Your programs are written 
top to bottom, and so far, the code has been executed in that order. But recursion is
different. In recursion you're creating new instances of the function (not sure if 
that's the right word) and jumping from one instance to another. I'll show you what 
I mean.

Let's take the following function as an example:

function factorial(n) {
	if (n === 1 || n === 0) {
		return 1;
	}
	else {
		return n * factorial(n-1);
	}
}

Before talking about the function and recursion, let me just first explain what a 
factorial is in case you aren't familiar (if you are, feel free to skip ahead).

The easiest way to explain what a factorial is is just by giving an example:
5! reads as "five factorial"
5! = 5*4*3*2*1
8! = 8*7*6*5*4*3*2*1
2! = 2*1
1! = 1
0! = 1 // special case
no such thing as taking the factorial of a negative number

Ok, so let's explore this factorial function. Say we call factorial(5). Let's go 
through it line by line. n will be equal to 5, and it doesn't go into the if block.
It will go into the else block. Inside of the else block, it says

return n * factorial(n-1);

Understanding this line is key to understanding the function, and to understanding 
recursion itself.

Here's what's going to happen:
- It's going to try to multiply 5 by factorial(4).
- But to do that, it needs to know what factorial(4) returns.
- To know what factorial(4) returns, it needs to run factorial(4).
- factorial(4) will try to multiply 4 by factorial(3).
- To know what factorial(3) returns, it needs to run factorial(3).
- factorial(3) will try to multiply 3 by factorial(2).
- To know what factorial(2) returns, it needs to run factorial(2).
- factorial(2) will try to multiply 2 by factorial(1).
- To know what factorial(1) returns, it needs to run factorial(1).
- factorial (1) will return 1.

Now watch what happens:
- In line 47, factorial(2) *paused* on line 14. It couldn't continue to run because it
needed to wait to see what factorial(1) returned. Now that it knows, it replaces 
factorial(1) with its return value, which is 1, multiplies it by 2, and returns it.
- Now, on line 45, it was waiting for factorial(2) to run and return a value. Now 
that it has, line 45 can resume execution and return 3*2 which is 6.
- This continues up the chain, but I'll continue to trace it for you :)
- So now that factorial(3) finished executing, line 43 can insert the return value in 
place of factorial(3), multiply it by 4, and return it.
- Finally, line 40 can place in the result of factorial(4), multiply it by 5, and 
return it.

Phew, that was a long trace. Let me try showing it to you a differnt way. I think 
this visualization will help you understand what it means when I say that the function
pauses execution, and then resumes execution. To help make this explicit, I'm going 
to write the function slightly differently.

function factorial(n) {
	if (n === 1 || n === 0) {
		return 1;
	}
	else {
		var r = factorial(n-1);
		return n * r;
	}
}

This is the same thing, as lines 9-16, except I split line 14 up into two lines to 
make things more explicit.

So say we call factorial(5).

function factorial(5) {
	if (n === 1 || n === 0) {
		return 1;
	}
	else {
 -> var r = factorial(4);
		return 5 * r;
	}
}

The function will *pause* on line 88 as it waits for factorial(n-1) to return a value.
Once it does, this function (let's call it factorial(5)) will continue executing where
it paused. It will assign the return value of factorial(4) to r, and then proceed to 
line 89 where it returns n*r.

Let's go through a whole trace of the call to factorial(5) this way. factorial(5) will
pause on line 88 and create a new instance, factorial(4):

function factorial(4) {
	if (n === 1 || n === 0) {
		return 1;
	}
	else {
 -> var r = factorial(3);
		return 4 * r;
	}
}

factorial(4) will pause on line 106, create a factorial(3) instance, and wait for it 
to return.

function factorial(3) {
	if (n === 1 || n === 0) {
		return 1;
	}
	else {
 -> var r = factorial(2);
		return 3 * r;
	}
}

factorial(3) will pause on line 119, create a factorial(2) instance, and wait for it
to return.

function factorial(2) {
	if (n === 1 || n === 0) {
		return 1;
	}
	else {
 -> var r = factorial(1);
		return 2 * r;
	}
}

factorial(2) will pause on line 132, create a factorial(1) instance, and wait for it
to return.

function factorial(1) {
	if (n === 1 || n === 0) {
 -> return 1;
	}
	else {
    var r = factorial(n-1);
		return 1 * r;
	}
}

factorial(1) will *not* make a recursive call (that's what it called when a function 
calls itself). It will return 1.

Now that factorial(1) has returned something, execution will resume on line 132. r 
will be assigned a value of 1, and line 133 will return 2.

Now that factorial(2) has returned something, execution will resume on line 119. r
will be assigned a value of 2, and line 120 will return 6.

Now that factorial(3) has returned something, execution will resume on line 106. r
will be assigned a value of 6, and line 107 will return 24.

Now that factorial(4) has returned something, execution will resume on line 88. r
will be assigned a value of 24, and line 89 will return 5*24, which is 120.


And that's recursion!

=================================================================================
To add:
- explanation of the call stack